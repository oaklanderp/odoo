name: Build and Deploy to GKE

on:
  # pull_request:
  #   types: [closed]
  push:

# Environment variables available to all jobs and steps in this workflow
env:
  GKE_PROJECT: ${{ secrets.GKE_PROJECT }}
  GKE_EMAIL: ${{ secrets.GKE_EMAIL }}
  GITHUB_SHA: ${{ github.sha }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  GKE_GCR:  ${{ secrets.GKE_GCR }}
  GKE_CLUSTER: cluster-1
  ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
  rODOO_PASSWORD: ${{ secrets.MASTER_PASSWORD }}
  IMAGE: web-app
  REGISTRY_HOSTNAME: gcr.io
  DEPLOYMENT_NAME: web-app
  NODE_ENV: production
  server: ./server
  ADDONS_EE: ./server/addons_dependencies

jobs:
  Build-Setup-Publish-Deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
    
      - uses: google-github-actions/setup-gcloud@v0
        with:
          version: "270.0.0"
          service_account_email: ${{ secrets.GKE_EMAIL }}
          service_account_key: ${{ secrets.GKE_KEY }}
  DeployStaging:
    name: Deploy to Staging 
    # if: "github.event.pull_request.merged == true"
    needs: [Build-Setup-Publish-Deploy]
    runs-on: ubuntu-latest
    environment: 
      name: staging
      url: 'http://staging.stage.inharf.xyz'
    steps:
      - run: |
          # Set up docker to authenticate
          # via gcloud command-line tool.
          gcloud auth configure-docker
      copy odoo EE official repo to our repo
      - name: ADDONS
        run: |
          mkdir -p  /home/runner/work/odoo/odoo/server/addons_dependencies && git clone https://oaklanderp:"$ACCESS_TOKEN"@github.com/odoo/enterprise --depth 1 --branch 15.0 /home/runner/work/odoo/odoo/server/addons_dependencies 
      Build the Docker image  
      - name: Build
        run: |
          cd /home/runner/work/odoo/odoo/server/ && ls && docker build -t "$REGISTRY_HOSTNAME"/"$GKE_PROJECT"/"$IMAGE":"$GITHUB_SHA" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" ./
        # working-directory: ${{ env.server }}         


      # Push the Docker image to Google Container Registry
      - name: Publish
        run: |
          docker push $REGISTRY_HOSTNAME/$GKE_PROJECT/$IMAGE:$GITHUB_SHA
        working-directory: ${{ env.server }}

      #  Set up kustomize
      - name: Set up Kustomize
        run: |
          curl -o kustomize --location https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize
        working-directory: ${{ env.server }}

      - name: Deploy
        run: |
          gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $GKE_PROJECT
          sed -i -e 's/REGISTRY_HOSTNAME/'"$REGISTRY_HOSTNAME"'/' ./staging_env/deployment.yaml
          sed -i   's/GKE_GCR/'"$GKE_GCR"'/' ./staging_env/deployment.yaml

          sed -i -e 's/IMAGE/'"$IMAGE"'/' ./staging_env/deployment.yaml
          sed -i -e 's/GITHUB_SHA/'"$GITHUB_SHA"'/' ./staging_env/deployment.yaml


          sed -i -e 's/REGISTRY_HOSTNAME/'"$REGISTRY_HOSTNAME"'/' ./staging_env/deployment.yaml


          kubectl apply -f /home/runner/work/odoo/odoo/server/staging_env/namespace.yaml 

          kubectl apply -f /home/runner/work/odoo/odoo/server/staging_env/postgres-secret.yaml --namespace  staging
          kubectl apply -f /home/runner/work/odoo/odoo/server/staging_env/postgres-configmap.yaml --namespace  staging
          kubectl apply -f /home/runner/work/odoo/odoo/server/staging_env/postgres-pv.yaml --namespace  staging
          kubectl apply -f /home/runner/work/odoo/odoo/server/staging_env/postgres-deployment.yaml --namespace  staging
          kubectl apply -f /home/runner/work/odoo/odoo/server/staging_env/postgres-service.yaml --namespace  staging


          kubectl apply -f /home/runner/work/odoo/odoo/server/staging_env/deployment.yaml --namespace  staging
          kubectl apply -f /home/runner/work/odoo/odoo/server/staging_env/web-app-service.yaml --namespace  staging
          kubectl apply -f /home/runner/work/odoo/odoo/server/staging_env/web-app-ingress.yaml --namespace  staging
  Deployprod:
    name: Deploy to Production
    needs: [DeployStaging]
    runs-on: ubuntu-latest
    environment: 
      name: Prod
      url: 'https://prod.stage.inharf.xyz'    
    steps:
      - run: |
          # Set up docker to authenticate
          # via gcloud command-line tool.
          gcloud auth configure-docker
      # copy odoo EE official repo to our repo
      - name: ADDONS
        run: |
          mkdir -p  /home/runner/work/odoo/odoo/server/addons_dependencies && git clone https://oaklanderp:"$ACCESS_TOKEN"@github.com/odoo/enterprise --depth 1 --branch 15.0 /home/runner/work/odoo/odoo/server/addons_dependencies 
      # Build the Docker image
      - name: Build
        run: |
          docker build -t "$REGISTRY_HOSTNAME"/"$GKE_PROJECT"/"$IMAGE":"$GITHUB_SHA" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" ./
        working-directory: ${{ env.server }}
      # Push the Docker image to Google Container Registry
      - name: Publish
        run: |
          docker push $REGISTRY_HOSTNAME/$GKE_PROJECT/$IMAGE:$GITHUB_SHA
        working-directory: ${{ env.server }}

      # Set up kustomize
      - name: Set up Kustomize
        run: |
          curl -o kustomize --location https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize
        working-directory: ${{ env.server }}

      # Deploy the Docker image to the GKE cluster
      - name: Deploy
        run: |
          gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $GKE_PROJECT
          sed -i   's/GKE_GCR/'"$GKE_GCR"'/' ./prod_env/deployment.yaml          
          sed -i -e 's/REGISTRY_HOSTNAME/'"$REGISTRY_HOSTNAME"'/' ./prod_env/deployment.yaml
          sed -i -e 's/IMAGE/'"$IMAGE"'/' ./prod_env/deployment.yaml
          sed -i -e 's/GITHUB_SHA/'"$GITHUB_SHA"'/' ./prod_env/deployment.yaml
          ./kustomize build ./prod_env | kubectl apply -f -
          kubectl rollout status deployment/$DEPLOYMENT_NAME -n prod
          kubectl get services -o wide -n prod
          kubectl get ingress  -o wide -n prod
          
        working-directory: ${{ env.server }}
    
    
    


  



              