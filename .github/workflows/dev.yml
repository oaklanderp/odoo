# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Set up secrets in your workspace: GKE_PROJECT with the name of the project, GKE_EMAIL with the service account email, GKE_KEY with the Base64 encoded JSON service account key (https://github.com/GoogleCloudPlatform/github-actions/tree/docs/service-account-key/setup-gcloud#inputs).
#
# 3. Change the values for the GKE_ZONE, GKE_CLUSTER, IMAGE, REGISTRY_HOSTNAME and DEPLOYMENT_NAME environment variables (below).

name: Build and Deploy to GKE

on:
  # pull_request:
  push:
    # branches:
    #   -${{ GITHUB_ACTOR }}
# Environment variables available to all jobs and steps in this workflow ${GH_USERNAME}
env:
  GKE_PROJECT: ${{ secrets.GKE_PROJECT }}
  GKE_EMAIL: ${{ secrets.GKE_EMAIL }}
  GITHUB_SHA: ${{ github.sha }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  GKE_GCR:  ${{ secrets.GKE_GCR }}
  GKE_CLUSTER: cluster-1
  ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
  IMAGE: web-app
  REGISTRY_HOSTNAME: gcr.io
  DEPLOYMENT_NAME: web-app
  NODE_ENV: production
  server: ./server
  ADDONS_EE: ./server/addons_dependencies

jobs:
  setup-build-publish-deploy:
    name: Setup, ADDONS, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    steps:
      ### Dependencies
      # - uses: rlespinasse/github-slug-action@v3.x
      # - name: Checkout local
      #   uses: actions/checkout@v2
      #   with:
      #     path: ${{ env.GITHUB_REPOSITORY_SLUG_URL }}    
      - name: Checkout
        uses: actions/checkout@v3
      # - name: Odoo Enterprise   
      #   uses: actions/checkout@v2
      #   with:
      #     #repository: odoo/enterprise.git
      #     repository: odoo/enterprise
      # #     # # token: ${{ secrets.GITHUB_TOKEN }}
      # #     # # token: ${{ secrets.ACTIONS_PAT }}
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     path: ./server/addons_dependencies
      #     # ref: ${{ env.GITHUB_REF }}        

    #   Setup gcloud CLI
    #  - uses: GoogleCloudPlatform/github-actions/setup-gcloud@v0.6.0
    #   -  uses: mattes/gce-cloudsql-proxy-action@v1
    #     with:
    #      creds: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
    #      instance: light-quest-349811:europe-west1:odoo-db     
      - uses: google-github-actions/setup-gcloud@v0
        with:
          version: "270.0.0"
          service_account_email: ${{ secrets.GKE_EMAIL }}
          service_account_key: ${{ secrets.GKE_KEY }}
    # Configure Workload Identity Federation and generate an access token.
    #   - id: 'auth'
    #    name: 'Authenticate to Google Cloud'
    #     uses: 'google-github-actions/auth@v0'
    #     with:
    #      token_format: 'access_token'
    #       workload_identity_provider: 'projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider'
    #       service_account: 'my-service-account@my-project.iam.gserviceaccount.com'         

      # Configure docker to use the gcloud command-line tool as a credential helper
      - run: |
          # Set up docker to authenticate
          # via gcloud command-line tool.
          gcloud auth configure-docker



      # copy odoo EE official repo to our repo
      - name: ADDONS
        run: |
          mkdir -p  /home/runner/work/odoo/odoo/server/addons_dependencies && git clone https://oaklanderp:"$ACCESS_TOKEN"@github.com/odoo/enterprise --depth 1 --branch 15.0 /home/runner/work/odoo/odoo/server/addons_dependencies 
# && ls  /home/runner/work/odoo/odoo/server/addons_dependencies &&   pwd    
        # working-directory: /home/runner/work/odoo/odoo/server/addons_dependencies 
        # ${{ env.ADDONS_EE }}
      # Build the Docker image  
      - name: Build
        run: |
          docker build -t "$REGISTRY_HOSTNAME"/"$GKE_PROJECT"/"$IMAGE":"$GITHUB_SHA" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" ./
        working-directory: ${{ env.server }}         


      # Push the Docker image to Google Container Registry
      - name: Publish
        run: |
          docker push $REGISTRY_HOSTNAME/$GKE_PROJECT/$IMAGE:$GITHUB_SHA
        working-directory: ${{ env.server }}

      # Set up kustomize
      - name: Set up Kustomize
        run: |
          curl -o kustomize --location https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize
        working-directory: ${{ env.server }}

      ### Deploy the Docker image to the GKE cluster 
      - name: Deploy
        run: |
          gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $GKE_PROJECT
          sed -i -e 's/GH_USERNAME/'"${GITHUB_ACTOR}"'/' ./dev_env/namespace.yaml
          sed -i -e 's/GH_USERNAME/'"${GITHUB_ACTOR}"'/' ./dev_env/postgres-pv.yaml
          sed -i -e 's/GH_USERNAME/'"${GITHUB_ACTOR}"'/' ./dev_env/postgres-configmap.yaml
          sed -i -e 's/GH_USERNAME/'"${GITHUB_ACTOR}"'/' ./dev_env/postgres-secret.yaml          
          sed -i -e 's/GH_USERNAME/'"${GITHUB_ACTOR}"'/' ./dev_env/postgres-service.yaml  
          sed -i -e 's/GH_USERNAME/'"${GITHUB_ACTOR}"'/' ./dev_env/postgres-deployment.yaml
          sed -i -e 's/GH_USERNAME/'"${GITHUB_ACTOR}"'/' ./dev_env/service.yaml
          sed -i -e 's/REGISTRY_HOSTNAME/'"$REGISTRY_HOSTNAME"'/' ./dev_env/deployment.yaml                               
          sed -i -e 's/IMAGE/'"$IMAGE"'/' ./dev_env/deployment.yaml
          sed -i -e 's/GITHUB_SHA/'"$GITHUB_SHA"'/' ./dev_env/deployment.yaml




          

          sed -i -e 's/GKE_GCR/'"$GKE_GCR"'/' ./dev_env/deployment.yaml
          ./kustomize build ./dev_env | kubectl apply -f -
          kubectl rollout status deployment/$DEPLOYMENT_NAME -n oaklanderp
          kubectl get services -o wide -n oaklanderp
          kubectl get ingress  -o wide -n oaklanderp
        working-directory: ${{ env.server }}

