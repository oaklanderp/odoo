# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Set up secrets in your workspace: GKE_PROJECT with the name of the project, GKE_EMAIL with the service account email, GKE_KEY with the Base64 encoded JSON service account key (https://github.com/GoogleCloudPlatform/github-actions/tree/docs/service-account-key/setup-gcloud#inputs).
#
# 3. Change the values for the GKE_ZONE, GKE_CLUSTER, IMAGE, REGISTRY_HOSTNAME and DEPLOYMENT_NAME environment variables (below).

name: Build and Deploy to GKE

on:
  #pull_request:
  push:
    branches:
      - 15.0
# Environment variables available to all jobs and steps in this workflow ${GH_USERNAME}
env:
  GKE_PROJECT: ${{ secrets.GKE_PROJECT }}
  GKE_EMAIL: ${{ secrets.GKE_EMAIL }}
  GITHUB_SHA: ${{ github.sha }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  GKE_GCR:  ${{ secrets.GKE_GCR }}
  GKE_CLUSTER: cluster-1
  IMAGE: web-app
  REGISTRY_HOSTNAME: gcr.io
  DEPLOYMENT_NAME: web-app
  NODE_ENV: production
  server: ./server
  ADDONS_EE: ./server/addons_dependencies

jobs:
  log-default-env:
    runs-on: ubuntu-latest
    steps:
      - name: Default ENV Variables
        run: |
          echo "HOME: ${HOME}"
          echo "GITHUB_WORKFLOW: ${GITHUB_WORKFLOW}"
          echo "GITHUB_ACTION: ${GITHUB_ACTION}"
          echo "GITHUB_ACTIONS: ${GITHUB_ACTIONS}"
          echo "GITHUB_ACTOR: ${GITHUB_ACTOR}"
          echo "GITHUB_REPOSITORY: ${GITHUB_REPOSITORY}"
          echo "GITHUB_EVENT_NAME: ${GITHUB_EVENT_NAME}"
          echo "GITHUB_WORKSPACE: ${GITHUB_WORKSPACE}"
          echo "GITHUB_SHA: ${GITHUB_SHA}"
          echo "GITHUB_REF: ${GITHUB_REF}"
          echo "GITHUB_REF_SLUG: ${GITHUB_REF_SLUG}"          
          echo "WF_ENV: ${WF_ENV}"
          echo "JOB_ENV: ${JOB_ENV}"
          echo "STEP_ENV: ${STEP_ENV}"
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    steps:
      ### Dependencies
      # - uses: rlespinasse/github-slug-action@v3.x
      # - name: Checkout local
      #   uses: actions/checkout@v2
      #   with:
      #     path: ${{ env.GITHUB_REPOSITORY_SLUG_URL }}    
      # - name: Checkout
      #   uses: actions/checkout@v3
      - name: Odoo Enterprise   
        uses: actions/checkout@v2
        with:
          #repository: odoo/enterprise.git
          repository: odoo/enterprise
      #     # # token: ${{ secrets.GITHUB_TOKEN }}
      #     # # token: ${{ secrets.ACTIONS_PAT }}
          token: ${{ secrets.GITHUB_TOKEN }}
          path: server/addons_dependencies
          ref: ${{ env.GITHUB_REF }}        

      # Setup gcloud CLI
     # - uses: GoogleCloudPlatform/github-actions/setup-gcloud@v0.6.0
      #-  uses: mattes/gce-cloudsql-proxy-action@v1
      #   with:
       #   creds: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
       #   instance: light-quest-349811:europe-west1:odoo-db     
      - uses: google-github-actions/setup-gcloud@v0
        with:
          version: "270.0.0"
          service_account_email: ${{ secrets.GKE_EMAIL }}
          service_account_key: ${{ secrets.GKE_KEY }}
    # Configure Workload Identity Federation and generate an access token.
      #- id: 'auth'
       # name: 'Authenticate to Google Cloud'
        #uses: 'google-github-actions/auth@v0'
        #with:
         # token_format: 'access_token'
          #workload_identity_provider: 'projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider'
          #service_account: 'my-service-account@my-project.iam.gserviceaccount.com'         

      # Configure docker to use the gcloud command-line tool as a credential helper
      - run: |
          # Set up docker to authenticate
          # via gcloud command-line tool.
          gcloud auth configure-docker



      # Build the Docker image
      - name: Build
        run: |
          docker build -t "$REGISTRY_HOSTNAME"/"$GKE_PROJECT"/"$IMAGE":"$GITHUB_SHA" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" ./
        working-directory: ${{ env.server }}

      # Push the Docker image to Google Container Registry
      - name: Publish
        run: |
          docker push $REGISTRY_HOSTNAME/$GKE_PROJECT/$IMAGE:$GITHUB_SHA
        working-directory: ${{ env.server }}

      # Set up kustomize
      - name: Set up Kustomize
        run: |
          curl -o kustomize --location https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize
        working-directory: ${{ env.server }}

      ### Deploy the Docker image to the GKE cluster 
      - name: Deploy
        run: |
          gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $GKE_PROJECT
          sed -i -e 's/REGISTRY_HOSTNAME/'"$REGISTRY_HOSTNAME"'/' ./gke_deploy/deployment.yaml
          sed -i -e 's/IMAGE/'"$IMAGE"'/' ./gke_deploy/deployment.yaml
          sed -i -e 's/GITHUB_SHA/'"$GITHUB_SHA"'/' ./gke_deploy/deployment.yaml
          sed -i -e 's/GH_USERNAME/'"${GITHUB_ACTOR}"'/' ./gke_deploy/service.yaml
          sed -i -e 's/GKE_GCR/'"$GKE_GCR"'/' ./gke_deploy/deployment.yaml
          ./kustomize build ./gke_deploy | kubectl apply -f -
          kubectl rollout status deployment/$DEPLOYMENT_NAME -n prod
          kubectl get services -o wide -n prod
          kubectl get ingress  -o wide -n prod
        working-directory: ${{ env.server }}

